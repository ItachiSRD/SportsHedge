// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: api/proto/ledger.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LegerServiceClient is the client API for LegerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LegerServiceClient interface {
	CreateOrUpdateBook(ctx context.Context, in *CreateUpdateBookReq, opts ...grpc.CallOption) (*CreateUpdateBookRes, error)
	GetBook(ctx context.Context, in *GetBookReq, opts ...grpc.CallOption) (*GetBookRes, error)
	// GetBalance will return a specific account's balance based on provided params
	GetBalance(ctx context.Context, in *GetBalanceReq, opts ...grpc.CallOption) (*GetBalanceRes, error)
	GetOperationByMemo(ctx context.Context, in *GetOperationByMemoReq, opts ...grpc.CallOption) (*GetOperationByMemoRes, error)
	CreateOperation(ctx context.Context, in *CreateOperationReq, opts ...grpc.CallOption) (*CreateOperationRes, error)
}

type legerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLegerServiceClient(cc grpc.ClientConnInterface) LegerServiceClient {
	return &legerServiceClient{cc}
}

func (c *legerServiceClient) CreateOrUpdateBook(ctx context.Context, in *CreateUpdateBookReq, opts ...grpc.CallOption) (*CreateUpdateBookRes, error) {
	out := new(CreateUpdateBookRes)
	err := c.cc.Invoke(ctx, "/ledger.LegerService/CreateOrUpdateBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *legerServiceClient) GetBook(ctx context.Context, in *GetBookReq, opts ...grpc.CallOption) (*GetBookRes, error) {
	out := new(GetBookRes)
	err := c.cc.Invoke(ctx, "/ledger.LegerService/GetBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *legerServiceClient) GetBalance(ctx context.Context, in *GetBalanceReq, opts ...grpc.CallOption) (*GetBalanceRes, error) {
	out := new(GetBalanceRes)
	err := c.cc.Invoke(ctx, "/ledger.LegerService/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *legerServiceClient) GetOperationByMemo(ctx context.Context, in *GetOperationByMemoReq, opts ...grpc.CallOption) (*GetOperationByMemoRes, error) {
	out := new(GetOperationByMemoRes)
	err := c.cc.Invoke(ctx, "/ledger.LegerService/GetOperationByMemo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *legerServiceClient) CreateOperation(ctx context.Context, in *CreateOperationReq, opts ...grpc.CallOption) (*CreateOperationRes, error) {
	out := new(CreateOperationRes)
	err := c.cc.Invoke(ctx, "/ledger.LegerService/CreateOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LegerServiceServer is the server API for LegerService service.
// All implementations must embed UnimplementedLegerServiceServer
// for forward compatibility
type LegerServiceServer interface {
	CreateOrUpdateBook(context.Context, *CreateUpdateBookReq) (*CreateUpdateBookRes, error)
	GetBook(context.Context, *GetBookReq) (*GetBookRes, error)
	// GetBalance will return a specific account's balance based on provided params
	GetBalance(context.Context, *GetBalanceReq) (*GetBalanceRes, error)
	GetOperationByMemo(context.Context, *GetOperationByMemoReq) (*GetOperationByMemoRes, error)
	CreateOperation(context.Context, *CreateOperationReq) (*CreateOperationRes, error)
	mustEmbedUnimplementedLegerServiceServer()
}

// UnimplementedLegerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLegerServiceServer struct {
}

func (UnimplementedLegerServiceServer) CreateOrUpdateBook(context.Context, *CreateUpdateBookReq) (*CreateUpdateBookRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateBook not implemented")
}
func (UnimplementedLegerServiceServer) GetBook(context.Context, *GetBookReq) (*GetBookRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBook not implemented")
}
func (UnimplementedLegerServiceServer) GetBalance(context.Context, *GetBalanceReq) (*GetBalanceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedLegerServiceServer) GetOperationByMemo(context.Context, *GetOperationByMemoReq) (*GetOperationByMemoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperationByMemo not implemented")
}
func (UnimplementedLegerServiceServer) CreateOperation(context.Context, *CreateOperationReq) (*CreateOperationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOperation not implemented")
}
func (UnimplementedLegerServiceServer) mustEmbedUnimplementedLegerServiceServer() {}

// UnsafeLegerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LegerServiceServer will
// result in compilation errors.
type UnsafeLegerServiceServer interface {
	mustEmbedUnimplementedLegerServiceServer()
}

func RegisterLegerServiceServer(s grpc.ServiceRegistrar, srv LegerServiceServer) {
	s.RegisterService(&LegerService_ServiceDesc, srv)
}

func _LegerService_CreateOrUpdateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUpdateBookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LegerServiceServer).CreateOrUpdateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ledger.LegerService/CreateOrUpdateBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LegerServiceServer).CreateOrUpdateBook(ctx, req.(*CreateUpdateBookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LegerService_GetBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LegerServiceServer).GetBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ledger.LegerService/GetBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LegerServiceServer).GetBook(ctx, req.(*GetBookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LegerService_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LegerServiceServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ledger.LegerService/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LegerServiceServer).GetBalance(ctx, req.(*GetBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LegerService_GetOperationByMemo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperationByMemoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LegerServiceServer).GetOperationByMemo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ledger.LegerService/GetOperationByMemo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LegerServiceServer).GetOperationByMemo(ctx, req.(*GetOperationByMemoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LegerService_CreateOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOperationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LegerServiceServer).CreateOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ledger.LegerService/CreateOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LegerServiceServer).CreateOperation(ctx, req.(*CreateOperationReq))
	}
	return interceptor(ctx, in, info, handler)
}

// LegerService_ServiceDesc is the grpc.ServiceDesc for LegerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LegerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ledger.LegerService",
	HandlerType: (*LegerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrUpdateBook",
			Handler:    _LegerService_CreateOrUpdateBook_Handler,
		},
		{
			MethodName: "GetBook",
			Handler:    _LegerService_GetBook_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _LegerService_GetBalance_Handler,
		},
		{
			MethodName: "GetOperationByMemo",
			Handler:    _LegerService_GetOperationByMemo_Handler,
		},
		{
			MethodName: "CreateOperation",
			Handler:    _LegerService_CreateOperation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/ledger.proto",
}
